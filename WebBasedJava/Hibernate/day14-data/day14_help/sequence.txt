Revise
Steps in annotations (hybrid manner)
1. <context> namespace
2. <context:annotation-config/>
3. <context:component-scan base-package="com.app"/>

Stereotype annotations
@Component : spring bean (loc-load--instantiate(def / parameterized constr D.I) --setter/field based D.I --custom init method : init sequence
def scope : singleton
def loading policy : eager

custom destroy  method -- invoked towards end of life cycle , before GC : only for singleton beans

@Scope
@Lazy
@AutoWired(required=true) --- setter / parameterized constr / field level --- autowire=byType 
@Qualifier("abc") -- autowire=byName
@PostConstruct
@PreDestroy

Can you completely remove XML contents : YES (spring boot)

Enter MVC : refer to MVC details

Spring MVC is a web app framework based on the model–view–controller pattern. It is based on the Spring framework and supports a wide range of server-side rendering technologies(view layer technology)  as JSP, Thymeleaf, Groovy etc.

Dispatcher Servlet
It is a front controller that coordinates all the request handling activities. Delegates to the HandlerMapping & request handling controllers. It is automatically created and configured by Spring Boot. If you are not using Spring Boot, you need to configure it in web.xml or using java configuration class.

Controller
Annotate controllers with @Controller and annotate methods in the controller with @RequestMapping or @GetMapping/@PostMapping ..  to tell Spring what method to execute when processing a particular HTTP GET/POST request. Controllers typically return a logical view name as String.
Or they can also return ModelAndView

Before entering spring-mvc : 

For  comparison of layers between JSP--JB--DAO --POJO --DB Vs Spring MVC layers.

refer : comparison of layers JSP-JB vs Spring MVC.png


Enter Spring MVC --concept & implementation steps
Refer to : "lab sequence for spring mvc.txt"
----------------------
1. Test Spring MVC flow.
(refer to lab sequence)

2. What is a model attribute?
It's the attribute(server side entry=k n value pair) 
Purpose : to store the results of B.L
Who creates  --- Controller
Who sends it to whom : Controller ---> D.S
After D.S gets actual view name from V.R : 
D.S chks : are there any model attrs : 
Yes : D.S saves model attrs under Request scope & then forwards the clnt to view layer .
NO : D.S forwards the clnt to view layer .
How to access these model attrs from JSP ?
${requestScope.attrName}

What are different ways for Controller to add model attrs ?
1. Via  is o.s.w.s.ModelAndView?

o.s.w.s.ModelAndView : class => holder for model attrs + logical view name

ModelAndView(String viewName,String modelAttrName,Object modelAttrVal)
eg : what can be valid ret type of req handling method
String  OR ModelAndView


2. Simpler way ?

Use  o.s.ui.Model : i/f ---holder (Map) of model attributes
How do u add model attributes ?
public Model addAttribute(String modelAttrName,Object modelAttrVal)
eg : How to add 2 model attrs?

	
Who will supply empty Model map ?  : SC
IoC : DI
How to tell SC that u need a model map ? : add it as the arg of req handling method
When controller rets string : logical view name (controller impl. rets all model map)



3. How to hide index.jsp under WEB-INF (i.e how to ensure that index page is served to client via D.S)
Add HomeController to serve index.jsp


4. Handling request parameters in Controller ?
eg : @RequestParam("price") double productPrice
SC : double productPrice =Double.parseDouble(request.getParameter("price"))
Reco : Match req param names with method arg names.
URL : http://localhost:8080/day13.1/test/product?nm=pen&qty=10&price=40.5&manuDate=2020-1-1
SC : def date time format : mon/day/year
Problem : HTTP 400 : Bad request => some request data coming from client is invalid
Def dat format : mon/day/yr
How to tell SC : about exact Date time format : annotation.


5. What's the meaning of HTTP status 400 : Bad Client Error
Typically it represents some request parameter conversion error.

Default date format used by SC : MM/dd/yyyy
In order to change it use : @DateTimeFormat annotation.


eg : @RequestParam("exp_date") @DateTimeFormat(pattern="yyyy-MM-dd")  Date expDate
SC invokes : SimpleDateFormat sdf=new SDF("yyyy-MM-dd");
Date expDate=sdf.parse(request.getParameter("exp_date"));

6. Integrate it with Hibernate.
